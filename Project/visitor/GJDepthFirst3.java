//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst3<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	
	int temp_no=200,label=0;
	public int IndF,IndV;
	public HashMap<String,Integer> Indexfun;
	public HashMap<String,Integer> Indexvar;
	public HashMap<String,String> parent;
	public HashMap<String,HashMap<String,Vector<Pair<String,String>>>> table1;
	public HashMap<String,Vector<Pair<String,String>>> table2;
	public HashMap<String,HashMap<String,Integer>> argcount;
	public HashMap<String,Integer> func_arg;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      String ans=" ",a;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         a=(String)e.nextElement().accept(this,argu);
         _count++;
         if(a!=null) {
         	ans=ans+"\n"+a;
         }
      }
      
      return (R)ans;
//      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
    	  
         R _ret=null;
         String ans=" ",a;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            a=(String)e.nextElement().accept(this,argu);
            _count++;
            if(a!=null) {
            	ans=ans+"\n"+a;
            }
         }
         return (R)(ans+"\n");
      }
      else
         return (R)"";
   }

   public R visit(NodeOptional n, A argu) {
	   String ans;
      if ( n.present() ) {
         ans=(String)n.node.accept(this,argu);
         if(ans==null)
        	 ans=" ";
         return (R)ans;
      }
      else
         return (R)" ";
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return (R)" ";
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      
 
      System.out.println("declare i8* @calloc(i32,i32)\n@formatString1 = private constant [2 x i8] c\"%d\" ,align 64\n" + 
        		"@formatString2 = private constant [2 x i8] c\"%c\" ,align 64\n" + 
        		"declare i32 @printf(i8*, i32)\n" + 
        		"define void @Print(i32 %a) {\n" + 
        		"  %call1 = call i32  @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @formatString1 , i32 0, i32 0), i32 %a)\n" + 
        		"  %call2 = call i32  @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @formatString2 , i32 0, i32 0), i32 10)\n" + 
        		"  ret void\n" + 
        		"}\n");
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      
      
      String ans="define i32 @main() {\n";
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, argu);
//      n.f9.accept(this, argu);
//      n.f10.accept(this, argu);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
//      n.f13.accept(this, argu);
      ans=ans+(String)n.f14.accept(this, argu);
//      n.f15.accept(this, argu);
//      n.f16.accept(this, argu);
      ans=ans+"ret i32 0 \n}\n";
      
      System.out.println(ans);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;

      
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, (A)n.f1.f0.tokenImage);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, (A)n.f1.f0.tokenImage);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      	
    
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
      
     
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
 
   
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      
      String class_name=(String)argu,func_name=(String)n.f2.f0.tokenImage;
      Pair<String,String>p=new Pair(class_name,func_name);

      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
//      n.f7.accept(this, argu);
//      n.f8.accept(this, (A)p);
//      n.f9.accept(this, argu);
//      n.f10.accept(this, (A)p);
//      n.f11.accept(this, argu);
//      n.f12.accept(this, argu);
      Pair <String,String> exp= (Pair <String,String>)n.f10.accept(this, (A)p);
     
      
      Integer count1 = table1.get(class_name).get(func_name).size()+1;
      Integer count = argcount.get(class_name).get(func_name);
      
      String arginp = " ( i8* %rohit0";
      
      for(int i=1;i<count;++i) {
    	  arginp=arginp+", i8* %rohit"+i;
      }
      
      arginp=arginp+" ){\n%table0 = bitcast i8* %rohit0 to i8**\n";
      
      
      for(int i=1;i<count;++i) {
    	  arginp=arginp+"%hell"+i+"= alloca i8* ,i32 1\n"
    			  +"store i8* %rohit"+i+" ,i8** %hell"+i+"\n";
      }
      
      for(int i=count;i<count1;++i) {
    	  arginp=arginp+"%hell"+i+"= alloca i8* ,i32 1\n";
      }
      
      String ans="define i8* @"+class_name+"_"+func_name+arginp
      +(String)n.f8.accept(this, (A)p)+exp.f+
      "ret i8* "+exp.s+"\n}\n";
      
      System.out.println(ans);
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
 
//      System.out.println(i);
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      String a=(String) n.f0.accept(this, argu);
      
      if(a==null)
    	  a=" ";
      return (R)a;
//      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String a=(String)n.f1.accept(this, argu);
      if(a==null)
    	  a=" ";
      return (R)a;
//      n.f2.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      
      String ans;
      String a=(String) n.f0.f0.tokenImage;
      Pair<String,String>p=(Pair<String,String>)argu;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      
      Pair <String,String>exp= (Pair <String,String>)n.f2.accept(this, argu);
      
      ans=exp.f;
      
      Iterator it= v1.iterator();
      
      int temp_not=temp_no;
      temp_no+=2;
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  if(a.equals(((Pair<String,String>)it.next()).f)==true) {
    		  fl=true;
    		  break;
    	  }
    	  offset++;
      }          
      if(fl) {
    	 ans=ans+"store i8* "+exp.s+", i8** %hell"+offset+"\n";
      }
      else {    
    	  
    	  ans=ans+"%hell"+temp_not+"= getelementptr i8*, i8** %table0, i32 "+Indexvar.get(a)+"\n"+
    			  "store i8* "+exp.s+", i8** %hell"+temp_not+"\n";
      }      
      
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      return (R)ans;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
      
      int temp_not=temp_no;
      temp_no+=6;
      
      String a=(String) n.f0.f0.tokenImage,ans;
      
      Pair<String,String>p=(Pair<String,String>)argu;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      
      Iterator it= v1.iterator();
      
      Pair <String,String>exp1 = ( Pair <String,String>)n.f2.accept(this, argu);
      Pair <String,String>exp2 = ( Pair <String,String>)n.f5.accept(this, argu);
      
      ans=exp1.f;
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  if(a.equals(((Pair<String,String>)it.next()).f)==true) {
    		  fl=true;
    		  break;
    	  }
    	  offset++;
      }
          
      if(fl) {
     	 ans=ans+"%hell"+temp_not+" = load i8*, i8** %hell"+offset+"\n"+
     		"%hell"+(temp_not+1)+" = bitcast i8* %hell"+(temp_not)+" to i8**\n"+
     		"%hell"+(temp_not+2)+" = ptrtoint i8* "+exp1.s+" to i32\n"+
     		"%hell"+(temp_not+3)+" = add i32 %hell"+(temp_not+2)+" ,1 \n"+
     		"%hell"+(temp_not+4)+" = getelementptr i8*, i8** %hell"+(temp_not+1)+", i32 %hell"+(temp_not+3)+"\n"+exp2.f+
     		"store i8* "+exp2.s+", i8** %hell"+(temp_not+4)+"\n";
       }
       else {    
     	  
     	  ans=ans+"%hell"+temp_not+" = getelementptr i8*, i8** %table0, i32 "+Indexvar.get(a)+"\n"+
     			 "%hell"+(temp_not+1)+" = load i8*, i8** %hell"+temp_not+"\n"+
          		"%hell"+(temp_not+2)+" = bitcast i8* %hell"+(temp_not+1)+" to i8**\n"+
          		"%hell"+(temp_not+3)+" = ptrtoint i8* "+exp1.s+" to i32\n"+
          		"%hell"+(temp_not+4)+" = add i32 %hell"+(temp_not+3)+" ,1 \n"+
          		"%hell"+(temp_not+5)+" = getelementptr i8*, i8** %hell"+(temp_not+2)+", i32 %hell"+(temp_not+4)+"\n"+exp2.f+
          		"store i8* "+exp2.s+", i8** %hell"+(temp_not+5)+"\n";
       }     

      
      
      
      return (R)ans;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      int temp_not=temp_no,label_not=label;
      temp_no+=2;
      label+=2;
      
      Pair<String,String>exp = (Pair<String,String>)n.f2.accept(this, argu);
      
      String ans=exp.f+"%hell"+(temp_not+1)+" = ptrtoint i8* "+exp.s+" to i32\n"
    		  +"\n%hell"+(temp_not)+" = icmp eq i32 %hell"+(temp_not+1)+" ,1\n"+
    		  "br i1 %hell"+temp_not+", label %l"+label_not+" , label %l"+(label_not+1)+"\n"+
    		  "l"+(label_not)+":\n"+
    		  (String)n.f4.accept(this, argu)+"\n"+
    		  "br label %l"+(label_not+1)+"\n"+ 
    		  "l"+(label_not+1)+":\n";
    	
      
      return (R)ans;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
//      n.f6.accept(this, argu);
      
      int temp_not=temp_no,label_not=label;
      temp_no+=2;
      label+=3;
      
      Pair<String,String>exp = (Pair<String,String>)n.f2.accept(this, argu);
      
      String ans=exp.f+"%hell"+(temp_not+1)+" = ptrtoint i8* "+exp.s+" to i32\n"
    		  +"\n%hell"+(temp_not)+" = icmp eq i32 %hell"+(temp_not+1)+" ,1\n"+
    		  "br i1 %hell"+temp_not+", label %l"+label_not+" , label %l"+(label_not+1)+"\n"+
    		  "l"+(label_not)+":\n"+
    		  (String)n.f4.accept(this, argu)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+ 
    		  "l"+(label_not+1)+":\n"+
    		  (String)n.f6.accept(this, argu)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+2)+":\n";
      return (R)ans;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      
      int temp_not=temp_no,label_not=label;
      temp_no+=2;
      label+=3;
      Pair<String,String>exp = (Pair<String,String>)n.f2.accept(this, argu);
      
      
      String ans= "br label %l"+(label_not)+"\n"+ 
    		  "l"+(label_not)+":\n"+
    		  exp.f+
    		  "%hell"+(temp_not+1)+" = ptrtoint i8* "+exp.s+" to i32\n"
    		  +"\n%hell"+(temp_not)+" = icmp eq i32 %hell"+(temp_not+1)+" ,1\n"+
    		  "br i1 %hell"+temp_not+", label %l"+(label_not+1)+" , label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+1)+":\n"+
    		  (String)n.f4.accept(this, argu)+"\n"+
    		  "br label %l"+(label_not)+"\n"+ 

    		  "l"+(label_not+2)+":\n";
      
      return (R)ans;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
      
      Pair<String,String>exp = (Pair<String,String>)n.f2.accept(this, argu);
      
      int temp_not=temp_no;
      temp_no+=1;
      
      String ans=exp.f+"%hell"+temp_not+" = ptrtoint i8* "+exp.s+" to i32\n"+"call void @Print (i32 %hell"+temp_not+" )\n";
      
      return (R)ans;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      Pair<String,String> a =(Pair<String,String>) n.f0.accept(this, argu);
      
      
      return (R)a;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      
      Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
      
      String ans;

      int temp_not=temp_no,label_not=label;
      temp_no+=7;
      label+=3;
    
      
      ans=e1.f+e2.f+
    		  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e1.s+" to i32\n"+
    		  "%hell"+(temp_not+5)+" = ptrtoint i8* "+e2.s+" to i32\n"+
    		  "%hell"+(temp_not+2)+" = alloca i32 , i32 1\n"+
    		  "%hell"+(temp_not)+" = mul i32 %hell"+(temp_not+4)+", %hell"+(temp_not+5)+"\n"+
    		  "%hell"+(temp_not+1)+" = icmp eq i32 %hell"+(temp_not)+" ,1\n"+
    		  "br i1 %hell"+(temp_not+1)+", label %l"+(label_not)+" , label %l"+(label_not+1)+"\n"+
    		  "l"+(label_not)+":\n"+
    		  "store i32 1, i32* %hell"+(temp_not+2)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+1)+":\n"+
    		  "store i32 0, i32* %hell"+(temp_not+2)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+2)+":\n"+
    		  "%hell"+(temp_not+3)+" = load i32, i32* %hell"+(temp_not+2)+"\n"+
    		  "%hell"+(temp_not+6)+" = inttoptr i32 %hell"+(temp_not+3)+" to i8*\n";
      
  
      exp = new Pair(ans,"%hell"+(temp_not+6));
      
      return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
	   R _ret=null;
	      
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
	      
	      String ans;

	      int temp_not=temp_no,label_not=label;
	      temp_no+=7;
	      label+=3;
	    
	      
	      ans=e1.f+e2.f+
	    		  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e1.s+" to i32\n"+
	    		  "%hell"+(temp_not+5)+" = ptrtoint i8* "+e2.s+" to i32\n"+
	    		  "%hell"+(temp_not+2)+" = alloca i32 , i32 1\n"+
	    		  "%hell"+(temp_not)+" = add i32 %hell"+(temp_not+4)+", %hell"+(temp_not+5)+"\n"+
	    		  "%hell"+(temp_not+1)+" = icmp sge i32 %hell"+(temp_not)+" ,1\n"+
	    		  "br i1 %hell"+(temp_not+1)+", label %l"+(label_not)+" , label %l"+(label_not+1)+"\n"+
	    		  "l"+(label_not)+":\n"+
	    		  "store i32 1, i32* %hell"+(temp_not+2)+"\n"+
	    		  "br label %l"+(label_not+2)+"\n"+
	    		  "l"+(label_not+1)+":\n"+
	    		  "store i32 0, i32* %hell"+(temp_not+2)+"\n"+
	    		  "br label %l"+(label_not+2)+"\n"+
	    		  "l"+(label_not+2)+":\n"+
	    		  "%hell"+(temp_not+3)+" = load i32, i32* %hell"+(temp_not+2)+"\n"+
	    		  "%hell"+(temp_not+6)+" = inttoptr i32 %hell"+(temp_not+3)+" to i8*\n";
	      
	  
	      exp = new Pair(ans,"%hell"+(temp_not+6));
      
      return (R)exp;
   
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      
      Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
      
      String ans;

      int temp_not=temp_no,label_not=label;
      temp_no+=7;
      label+=3;
    
      
      ans=e1.f+e2.f+
    		  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e1.s+" to i32\n"+
    		  "%hell"+(temp_not+5)+" = ptrtoint i8* "+e2.s+" to i32\n"+
		  "%hell"+(temp_not+2)+" = alloca i32 , i32 1\n"+
		  "%hell"+(temp_not)+" = icmp sle i32 %hell"+(temp_not+4)+", %hell"+(temp_not+5)+"\n"+
		  "br i1 %hell"+(temp_not)+", label %l"+(label_not)+" , label %l"+(label_not+1)+"\n"+
		  "l"+(label_not)+":\n"+
		  "store i32 1, i32* %hell"+(temp_not+2)+"\n"+
		  "br label %l"+(label_not+2)+"\n"+
		  "l"+(label_not+1)+":\n"+
		  "store i32 0, i32* %hell"+(temp_not+2)+"\n"+
		  "br label %l"+(label_not+2)+"\n"+
		  "l"+(label_not+2)+":\n"+
		  "%hell"+(temp_not+3)+" = load i32, i32* %hell"+(temp_not+2)+"\n"+
		  "%hell"+(temp_not+6)+" = inttoptr i32 %hell"+(temp_not+3)+" to i8*\n";
	      
	  
	      exp = new Pair(ans,"%hell"+(temp_not+6));
      
  

	  exp = new Pair(ans,"%hell"+(temp_not+6));
	  
	  return (R)exp;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
	   R _ret=null;
	      
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
	      
	      String ans;

	      int temp_not=temp_no,label_not=label;
	      temp_no+=7;
	      label+=3;
	    
	      
	      ans=e1.f+e2.f+
	    		  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e1.s+" to i32\n"+
	    		  "%hell"+(temp_not+5)+" = ptrtoint i8* "+e2.s+" to i32\n"+
			  "%hell"+(temp_not+2)+" = alloca i32 , i32 1\n"+
			  "%hell"+(temp_not)+" = icmp ne i32 %hell"+(temp_not+4)+", %hell"+(temp_not+5)+"\n"+
			  "br i1 %hell"+(temp_not)+", label %l"+(label_not)+" , label %l"+(label_not+1)+"\n"+
			  "l"+(label_not)+":\n"+
			  "store i32 1, i32* %hell"+(temp_not+2)+"\n"+
			  "br label %l"+(label_not+2)+"\n"+
			  "l"+(label_not+1)+":\n"+
			  "store i32 0, i32* %hell"+(temp_not+2)+"\n"+
			  "br label %l"+(label_not+2)+"\n"+
			  "l"+(label_not+2)+":\n"+
			  "%hell"+(temp_not+3)+" = load i32, i32* %hell"+(temp_not+2)+"\n"+
			  "%hell"+(temp_not+6)+" = inttoptr i32 %hell"+(temp_not+3)+" to i8*\n";
		      
		  
		      exp = new Pair(ans,"%hell"+(temp_not+6));
	      
	  

		  exp = new Pair(ans,"%hell"+(temp_not+6));
		  
		  return (R)exp;

   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
	      
	      String ans;

	      int temp_not=temp_no;
	      temp_no+=4;
	      
	      ans=e1.f+e2.f+
	    		  "%hell"+(temp_not+1)+" = ptrtoint i8* "+e1.s+" to i32\n"+
	    		  "%hell"+(temp_not+2)+" = ptrtoint i8* "+e2.s+" to i32\n"+
	    		  "%hell"+(temp_not)+" = add i32 %hell"+(temp_not+1)+", %hell"+(temp_not+2)+"\n"+
		  "%hell"+(temp_not+3)+" = inttoptr i32 %hell"+temp_not+" to i8*\n";
	
		  exp = new Pair(ans,"%hell"+(temp_not+3));
		  
		  return (R)exp;
      
      
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
      
      String ans;

      int temp_not=temp_no;
      temp_no+=4;
      
      ans=e1.f+e2.f+
    		  "%hell"+(temp_not+1)+" = ptrtoint i8* "+e1.s+" to i32\n"+
    		  "%hell"+(temp_not+2)+" = ptrtoint i8* "+e2.s+" to i32\n"+
    		  "%hell"+(temp_not)+" = sub i32 %hell"+(temp_not+1)+", %hell"+(temp_not+2)+"\n"+
	  "%hell"+(temp_not+3)+" = inttoptr i32 %hell"+temp_not+" to i8*\n";

	  exp = new Pair(ans,"%hell"+(temp_not+3));
	  
	  return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
	 //R _ret=null;
	      
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
	      
      String ans;

      int temp_not=temp_no;
      temp_no+=4;
      
      ans=e1.f+e2.f+
    		  "%hell"+(temp_not+1)+" = ptrtoint i8* "+e1.s+" to i32\n"+
    		  "%hell"+(temp_not+2)+" = ptrtoint i8* "+e2.s+" to i32\n"+
    		  "%hell"+(temp_not)+" = mul i32 %hell"+(temp_not+1)+", %hell"+(temp_not+2)+"\n"+
	  "%hell"+(temp_not+3)+" = inttoptr i32 %hell"+temp_not+" to i8*\n";

	  exp = new Pair(ans,"%hell"+(temp_not+3));
	  
	  return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
	 //R _ret=null;
	      
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
	      
	      String ans;

	      int temp_not=temp_no;
	      temp_no+=4;
	      
	      ans=e1.f+e2.f+
	    		  "%hell"+(temp_not+1)+" = ptrtoint i8* "+e1.s+" to i32\n"+
	    		  "%hell"+(temp_not+2)+" = ptrtoint i8* "+e2.s+" to i32\n"+
	    		  "%hell"+(temp_not)+" = sdiv i32 %hell"+(temp_not+1)+", %hell"+(temp_not+2)+"\n"+
		  "%hell"+(temp_not+3)+" = inttoptr i32 %hell"+temp_not+" to i8*\n";
	
		  exp = new Pair(ans,"%hell"+(temp_not+3));
		  
		  return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      
      
      Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu),e2=(Pair<String,String>)n.f2.accept(this, argu);
      
      String ans;

      int temp_not=temp_no;
      temp_no+=5;
      
      ans=e1.f+
	  "%hell"+(temp_not)+" = bitcast i8* "+e1.s+" to i8**\n"+e2.f+"\n"+
	  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e2.s+" to i32\n"+
	  "%hell"+(temp_not+1)+" = add i32 %hell"+(temp_not+4)+" , 1\n"+
	  "%hell"+(temp_not+2)+" = getelementptr i8*, i8** %hell"+(temp_not)+", i32 %hell"+(temp_not+1)+"\n"+
	  "%hell"+(temp_not+3)+" = load i8*, i8** %hell"+(temp_not+2)+"\n";

	  exp = new Pair(ans,"%hell"+(temp_not+3));
	  
	  return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
	   Pair<String,String> exp,e1=(Pair<String,String>)n.f0.accept(this, argu);
	      
      String ans;

      int temp_not=temp_no;
      temp_no+=4;
      
      ans=e1.f+
	  "%hell"+(temp_not)+" = bitcast i8* "+e1.s+" to i8**\n"+
	  "%hell"+(temp_not+1)+" = load i8*, i8** %hell"+(temp_not)+"\n";

	  exp = new Pair(ans,"%hell"+(temp_not+1));
	  
	  return (R)exp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   
   String class_checker;
   boolean checker =false;
   
   
   public R visit(MessageSend n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
//      n.f4.accept(this, argu);
//      n.f5.accept(this, argu);
      
      Pair<String,String>p=(Pair<String,String>)argu;
      
      int temp_not=temp_no;
      temp_no+=7;
      
      Vector<Pair<String,String>> v_args=new Vector<Pair<String,String>>();
      
      checker=true;
      Pair<String,String>e= (Pair<String,String>)n.f0.accept(this, argu),temp,exp;
      checker=false;
      
//      System.out.println(class_checker);
      
      String func_name=n.f2.f0.tokenImage,class_name=class_checker;
      
      Pair<Vector<Pair<String,String>>,Pair<String,String>> hell_pair=new Pair(v_args,p);
      n.f4.accept(this, (A)hell_pair);
      
      String arginp="",ans=e.f;
      
      Iterator it= v_args.iterator();
      
      arginp=arginp+"  i8* "+e.s;
      
      
      while(it.hasNext()) {
    	  temp= (Pair<String,String>)it.next() ;
    	  ans=ans+temp.f;
    	  arginp=arginp+" , i8* "+temp.s;

      }  

      if(table1.get(class_name)==null ) {
    	  class_name=null;
      }
      else {
      
      while( table1.get(class_name).get(func_name)==null) {
    	  if(parent.get(class_name)==null) {
    		  class_name=null;
    		  break;
    	  }
    	  class_name=parent.get(class_name);
    	  
    	  if(table1.get(class_name)==null) {
    		  class_name=null;
    		  break;
    	  }
      }
      }
      Integer count;
      if(class_name==null || argcount.get(class_name)==null || argcount.get(class_name).get(func_name)==null)
    	  count=func_arg.get(func_name);
      else
    	  count = argcount.get(class_name).get(func_name);
      
      String arginptype = " i8* (i8*";
      
      for(int i=1;i<count;++i) {
    	  arginptype=arginptype+",i8*";
      }
      
      arginptype=arginptype+")*";
      
      ans=ans+"%hell"+(temp_not)+" = bitcast i8* "+e.s+" to i8**\n"+
    		 "%hell"+(temp_not+1)+" = load i8*, i8** %hell"+(temp_not)+"\n"+
    		 "%hell"+(temp_not+2)+" = bitcast i8* %hell"+(temp_not+1)+" to i8**\n"+
    		 "%hell"+(temp_not+3)+" = getelementptr i8* ,i8** %hell"+(temp_not+2)+" , i32 "+Indexfun.get(func_name)+"\n"+
    		 "%hell"+(temp_not+4)+" = load i8* , i8** %hell"+(temp_not+3)+"\n"+
    		 "%hell"+(temp_not+5)+" = bitcast i8* %hell"+(temp_not+4)+" to "+arginptype+"\n"+
    		 "%hell"+(temp_not+6)+" = call i8* %hell"+(temp_not+5)+"( "+arginp+")\n";
      
      exp =new Pair(ans,"%hell"+(temp_not+6));
      
      
      return (R)exp;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      Pair<Vector<Pair<String,String>>,Pair<String,String>> hell_pair = (Pair<Vector<Pair<String,String>>,Pair<String,String>>)argu;
      
      Pair<String,String>e= (Pair<String,String>)n.f0.accept(this,(A)hell_pair.s);
      hell_pair.f.add(e);
      n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      Pair<Vector<Pair<String,String>>,Pair<String,String>> hell_pair = (Pair<Vector<Pair<String,String>>,Pair<String,String>>)argu;
      Pair<String,String>e= (Pair<String,String>)n.f1.accept(this, (A)hell_pair.s);
      hell_pair.f.add(e);

      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
     
      return n.f0.accept(this, argu);
//      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      
      int temp_not=temp_no;
      temp_no+=1;
      
      String ans = "%hell"+(temp_not)+" = inttoptr i32 "+n.f0.tokenImage+" to i8*\n";
      Pair<String,String>p=new Pair(ans,"%hell"+temp_not);
      
      return (R)p;

   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      int temp_not=temp_no;
      temp_no+=1;
      
      String ans = "%hell"+(temp_not)+" = inttoptr i32 1 to i8*\n";
      Pair<String,String>p=new Pair(ans,"%hell"+temp_not);
      
      return (R)p;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      int temp_not=temp_no;
      temp_no+=1;
      
      String ans = "%hell"+(temp_not)+" = inttoptr i32 0 to i8*\n";
      Pair<String,String>p=new Pair(ans,"%hell"+temp_not);
      
      return (R)p;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String a=(String) n.f0.accept(this, argu),ans;
      
      Pair<String,String>p=(Pair<String,String>)argu,exp,temp;
      
      String class_name=p.f,func_name=p.s;
      
      Vector<Pair<String,String>> v1 =table1.get(class_name).get(func_name);
      Vector<Pair<String,String>> v2 =table2.get(class_name);
      
      Iterator it= v1.iterator();
      
      int temp_not=temp_no;
      temp_no+=2;
      
      int offset=1;
      boolean fl=false;
      
      while(it.hasNext()) {
    	  temp=(Pair<String,String>)it.next();
    	  if(a.equals(temp.f)==true) {
    		  fl=true;
    		  if(checker)
    			  class_checker=temp.s;
    		  break;
    		  
    	  }
    	  offset++;
      }  
      
      if(fl) {
    	  ans="%hell"+(temp_not)+" = load i8*, i8** %hell"+offset+"\n";
      }
      else {
    	  
    	  ans="%hell"+(temp_not+1)+" = getelementptr i8* , i8** %table0 , i32 "+Indexvar.get(a)+"\n"+
    			  "%hell"+(temp_not)+" = load i8*, i8** %hell"+(temp_not+1)+"\n";
    	  
    	  Iterator ut= v2.iterator();
    	  while(ut.hasNext()) {
        	  temp=(Pair<String,String>)ut.next();
        	  if(a.equals(temp.f)==true) {
        		  if(checker)
        			  class_checker=temp.s;
        		  break;
        		  
        	  }
          }  
    	  
    	  
      }
      exp = new Pair(ans,"%hell"+(temp_not));
      
      
      
      
      
      return (R)exp;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
//      n.f0.accept(this, argu);
      Pair<String,String>p=(Pair<String,String>)argu;
      if(checker)
    	  class_checker=p.f;
      
      
      Pair<String,String>exp = new Pair("","%rohit0");

      return (R)exp;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      
      int temp_not=temp_no;
      temp_no+=7;    

      
      Pair<String,String>e=(Pair<String,String>)n.f3.accept(this, argu),exp;
      
      String ans=e.f+"%hell"+(temp_not+3)+" = ptrtoint i8* "+e.s+" to i32\n"
    		  +"%hell"+(temp_not)+" = add i32 %hell"+(temp_not+3)+", 1\n"+
    		  "%hell"+(temp_not+6)+" = mul i32 %hell"+(temp_not)+" ,8\n"+
    		  		"%hell"+(temp_not+5)+" = call i8* @calloc ( i32 1 ,i32 %hell"+(temp_not+6)+")\n"+
    		  		"%hell"+(temp_not+1)+" = bitcast i8* %hell"+(temp_not+5)+" to i8**\n"+
    		  		"%hell"+(temp_not+4)+" = inttoptr i32 %hell"+(temp_not)+" to i8*\n"+
    		  "store i8* "+e.s+" , i8** %hell"+(temp_not+1)+"\n"+
    		  		"%hell"+(temp_not+2)+" = bitcast i8** %hell"+(temp_not+1)+" to i8*\n";
      exp= new Pair(ans,"%hell"+(temp_not+2));
      
      
      return (R)exp;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
     
            
//      n.f0.accept(this, argu);
//      n.f1.accept(this, argu);
//      n.f2.accept(this, argu);
//      n.f3.accept(this, argu);
      if(checker)
    	  class_checker=n.f1.f0.tokenImage;
      
      int temp_not=temp_no,label_not=label;
      
      label+=4;
      
      
      String ans="%hell"+(temp_not+2)+" = call i8* @calloc (i32 1,i32 "+(IndV*8)+")\n"+
    		  "%hell"+(temp_not+3)+" = call i8* @calloc (i32 1,i32 "+(IndF*8)+")\n"+
    		  "%hell"+(temp_not)+" = bitcast i8*  %hell"+(temp_not+2)+" to i8**\n"+
    		  "%hell"+(temp_not+1)+" = bitcast i8*  %hell"+(temp_not+3)+" to i8**\n";
      
      String class_name=(String)n.f1.f0.tokenImage,func_name;
      
      int arr[]=new int[IndF],index;
      
      for(int i=0;i<IndF;++i)
    	  arr[i]=0;
      
      HashMap<String,Vector<Pair<String,String>>>v1;
      
      int j=4;
      
      while(true) {
    	  if(class_name==null)
    		  break;
    	  v1=table1.get(class_name);
    	  
    	  Iterator it=v1.entrySet().iterator(); 
    	  
    	  while (it.hasNext()) { 
              Map.Entry mapElement = (Map.Entry)it.next(); 
              func_name=(String)(mapElement.getKey()); 
              index=Indexfun.get(func_name);
              
              if(arr[index]==1)
            	  continue;
              
              Integer count = argcount.get(class_name).get(func_name);
              
              String arginptype = " i8* (i8*";
              
              for(int i=1;i<count;++i) {
            	  arginptype=arginptype+",i8*";
              }
              
              arginptype=arginptype+")*";
              
              ans=ans+"%hell"+(temp_not+j)+" = bitcast "+arginptype+" @"+class_name+"_"+func_name+" to i8*\n"+
            		  "%hell"+(temp_not+j+1)+" = getelementptr i8* , i8** %hell"+(temp_not+1)+", i32 "+index+"\n"+
            		  "store i8* %hell"+(temp_not+j)+", i8** %hell"+(temp_not+j+1)+"\n";
              j+=2;
              
              arr[index]=1;
          } 
    	  
    	  class_name=parent.get(class_name);
    	  
      }
      
     
      
      ans=ans+"%hell"+(temp_not+j)+" = bitcast i8** %hell"+(temp_not+1)+" to i8*\n"+
    		  "store i8* %hell"+(temp_not+j)+" , i8** %hell"+(temp_not)+"\n"+
    		  "%hell"+(temp_not+j+1)+" = bitcast i8** %hell"+(temp_not)+" to i8*\n";
      temp_no+=j+2;

	  Pair<String,String> exp;
      exp=new Pair(ans,"%hell"+(temp_not+j+1));
      
      return (R)exp;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      
      Pair<String,String>e=(Pair<String,String>)n.f1.accept(this, argu),exp;
      
      int temp_not=temp_no,label_not=label;
      temp_no+=6;
      label+=3;
      
      String ans=e.f+
    		  "%hell"+(temp_not+2)+" = alloca i32 , i32 1\n"+
    		  "%hell"+(temp_not+4)+" = ptrtoint i8* "+e.s+" to i32\n"+
    		  "%hell"+(temp_not)+" = icmp eq i32 %hell"+(temp_not+4)+", 1\n"+
    		  "br i1 %hell"+(temp_not)+", label %l"+(label_not)+" , label %l"+(label_not+1)+"\n"+
    		  "l"+(label_not)+":\n"+
    		  "store i32 0, i32* %hell"+(temp_not+2)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+1)+":\n"+
    		  "store i32 1, i32* %hell"+(temp_not+2)+"\n"+
    		  "br label %l"+(label_not+2)+"\n"+
    		  "l"+(label_not+2)+":\n"+
    		  "%hell"+(temp_not+3)+" = load i32, i32* %hell"+(temp_not+2)+"\n"+
    		  "%hell"+(temp_not+5)+" = inttoptr i32 %hell"+(temp_not+3)+" to i8*\n";
      
      exp= new Pair(ans,"%hell"+(temp_not+5));
      return (R)exp;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;      
      return n.f1.accept(this, argu);
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
